{"version":3,"sources":["containers/style.module.scss","store/types/index.ts","locales/index.ts","components/Screen/index.tsx","containers/index.tsx","utils/index.ts","store/actions/index.ts","utils/serviceWorker.ts","store/reducers/index.ts","store/reducers/locales.ts","store/sagas/index.ts","store/index.ts","index.tsx","components/Screen/sttyle.module.scss"],"names":["module","exports","app","Types","LOCALES","en-US","require","zh-CN","Wrapper","_ref","children","react_default","a","createElement","className","style","wrapper","center","screen","memo","Screen_Wrapper","App","state","initLocales","switchLocales","locales","window","location","href","concat","origin","pathname","str","intl","init","currentLocale","this","setState","lang","name","reg","RegExp","r","search","substr","match","decodeURIComponent","getUrlParam","hasOwnProperty","props","updateLocales","loadLocales","console","log","prevProps","components_Screen","Component","connect","dispatch","type","UPDATE_LOCALES","payload","action","isFirst","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","waiting","onUpdate","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","catch","error","addEventListener","reload","combineReducers","arguments","length","undefined","incrementAsync","fetchData","watchIncrementAsync","rootSaga","regenerator_default","wrap","_context","prev","next","delay","put","ADD_COUNT","num","stop","_marked","fn","Promise","resolve","reject","setTimeout","greeting","task","_context2","call","sent","fork","_marked2","_context3","takeEvery","ADD_COUNT_ASYNC","_marked3","_context4","_marked4","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","sagaMiddleware","createSagaMiddleware","configStore","store","createStore","applyMiddleware","persistor","persistStore","run","configureStore","ReactDOM","render","es","integration_react","containers","document","getElementById","URL","process","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","checkValidServiceWorker","confirm","postMessage","e","version","decorate"],"mappings":"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","file":"static/js/main.ca1fcee1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"style_app__1hNgg\"};","/*\n * @Author: lifan\n * @Date: 2018-12-12 13:31:05\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-13 13:53:47\n */\n\n/* eslint-disable no-unused-vars */\nenum Types {\n  ADD_COUNT = 'ADD_COUNT',\n  ADD_COUNT_ASYNC = 'ADD_COUNT_ASYNC',\n  REDUCE_COUNT = 'REDUCE_COUNT',\n  UPDATE_LOCALES = 'UPDATE_LOCALES',\n  GAME_OVER = 'GAME_OVER', // 游戏结束\n  PAUSE = 'PAUSE', // 暂停\n  START = 'START', // 开始\n  RESTART = 'RESTART', // 重新开始\n  RORATE = 'RORATE', // 旋转\n  SET_SPEED = 'SET_SPEED', // 设置速度\n  SET_DEFAULT_LINES = 'SET_DEFAULT_LINES' // 设置初始行数\n}\n\nexport default Types;\n","/*\n * @Author: lifan\n * @Date: 2018-12-14 10:16:11\n * @Last Modified by:   lifan\n * @Last Modified time: 2018-12-14 10:16:11\n */\nexport const LOCALES = {\n  'en-US': require('./en-US.json'),\n  'zh-CN': require('./zh-CN.json'),\n};\n\nexport type TYPE_LOCALES = keyof typeof LOCALES;\n","/*\n * @Author: lifan\n * @Date: 2018-12-19 21:05:34\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-19 23:04:09\n */\nimport React, { memo, ReactNode } from 'react';\nimport style from './sttyle.module.scss';\n\nconst Wrapper = ({ children }: { children: ReactNode }) => (\n  <div className={style.wrapper}>\n    <div className={style.center}>\n      <div className={style.screen}>\n        {\n          children\n        }\n      </div>\n    </div>\n  </div>\n);\n\nconst Screen = () => (\n  <Wrapper>\n    hello\n  </Wrapper>\n);\n\nexport default memo(Screen);\n","import React, { Component } from 'react';\nimport { Dispatch } from 'redux';\nimport { State } from '../store/reducers';\nimport { connect } from 'react-redux';\nimport intl from 'react-intl-universal';\nimport { LOCALES, TYPE_LOCALES } from '../locales';\nimport * as action from '../store/actions';\nimport { getUrlParam } from '../utils';\nimport Screen from '../components/Screen';\n\nimport style from './style.module.scss';\n\ninterface Props {\n  locales: TYPE_LOCALES;\n  updateLocales: (locales: TYPE_LOCALES) => void;\n}\n\nclass App extends Component<Props> {\n  state = {\n    initLocales: false\n  };\n\n  async loadLocales(str: TYPE_LOCALES) {\n    try {\n      await intl.init({\n        currentLocale: str,\n        locales: LOCALES,\n      });\n    } finally {\n      this.setState({\n        initLocales: true\n      });\n    }\n  }\n\n  initLocales(locales: TYPE_LOCALES) {\n    const lang = getUrlParam('lang') as TYPE_LOCALES;\n\n    if (lang && LOCALES.hasOwnProperty(lang)) {\n      this.props.updateLocales(lang);\n      this.loadLocales(lang);\n    } else {\n      this.loadLocales(locales);\n    }\n  }\n\n  switchLocales = (locales: TYPE_LOCALES) => {\n    window.location.href = `${window.location.origin}${window.location.pathname}?lang=${locales}`;\n  }\n\n  componentDidMount() {\n    this.initLocales(this.props.locales);\n    console.log(this.props);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.locales !== this.props.locales) {\n      this.switchLocales(this.props.locales);\n    }\n  }\n\n  render() {\n    const { initLocales } = this.state;\n\n    if (!initLocales) {\n      return null;\n    }\n\n    return (\n      <div className={style.app}>\n        <Screen />\n      </div>\n    );\n  }\n}\n\nconst mapState = (state: State) => ({\n  locales: state.locales,\n});\n\nconst mapDispatch = (dispatch: Dispatch) => ({\n  updateLocales: (locales: TYPE_LOCALES) => dispatch(action.updateLocales(locales)),\n});\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(App);\n","/*\n * @Author: lifan\n * @Date: 2018-12-13 13:36:59\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-13 16:06:01\n */\n\n/**\n * 判断是否为移动端\n */\nexport const isMobile = (): boolean =>\n  /(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent);\n\n/**\n * 获取url参数\n * @param {string} name\n */\nexport const getUrlParam = (name: string) => {\n  const reg = new RegExp(`(^|&)${name}=([^&]*)(&|$)`);\n  const r = window.location.search.substr(1).match(reg);\n\n  if (r != null) {\n    return decodeURIComponent(r[2]);\n  }\n\n  return;\n};\n","/*\n * @Author: lifan\n * @Date: 2018-12-12 14:50:48\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-14 10:19:03\n */\nimport Types from '../types';\nimport { TYPE_LOCALES } from '../../locales';\n\n/* eslint-disable no-use-before-define */\nexport type AddCount = ReturnType<typeof addCount>;\nexport const addCount = (num: number) => ({\n  type: <Types.ADD_COUNT>Types.ADD_COUNT,\n  payload: {\n    num\n  }\n});\n\nexport type AddCountAsync = ReturnType<typeof addCountAsync>;\nexport const addCountAsync = () => ({\n  type: <Types.ADD_COUNT_ASYNC>Types.ADD_COUNT_ASYNC,\n});\n\nexport type ReduceCount = ReturnType<typeof reduceCount>;\nexport const reduceCount = (num: number) => ({\n  type: <Types.REDUCE_COUNT>Types.REDUCE_COUNT,\n  payload: {\n    num\n  }\n});\n\nexport type UpdateLocales = ReturnType<typeof updateLocales>;\nexport const updateLocales = (locales: TYPE_LOCALES) => ({\n  type: <Types.UPDATE_LOCALES>Types.UPDATE_LOCALES,\n  payload: {\n    locales\n  }\n});\n\nexport type Action =\n  | AddCount\n  | AddCountAsync\n  | ReduceCount\n  | UpdateLocales;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\n/* eslint-disable */\nlet isFirst = false;\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      if (registration.waiting) {\n        if (config && config.onUpdate) {\n          config.onUpdate(registration);\n        }\n        return;\n      }\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              isFirst = false;\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n              isFirst = true;\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n\n  navigator.serviceWorker.addEventListener('controllerchange', () => {\n    console.log('controllerchange');\n    if (!isFirst) {\n      window.location.reload();\n      isFirst = true;\n    }\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport locales from './locales';\nimport { TYPE_LOCALES } from '../../locales';\n\nexport interface State {\n  locales: TYPE_LOCALES;\n}\n\nexport default combineReducers<State>({\n  locales,\n});\n","/*\n * @Author: lifan\n * @Date: 2018-12-13 13:56:58\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-14 10:21:38\n */\n\nimport Types from '../types';\nimport { Action } from '../actions';\nimport { TYPE_LOCALES } from '../../locales';\n\nexport default (state: TYPE_LOCALES = 'zh-CN', action: Action) => {\n  switch (action.type) {\n    case Types.UPDATE_LOCALES:\n      return action.payload.locales;\n    default: return state;\n  }\n};\n","import { call, put, takeEvery, fork, delay } from 'redux-saga/effects';\nimport Types from '../types';\n\nexport function* incrementAsync() {\n  yield delay(1000);\n  yield put({\n    type: Types.ADD_COUNT,\n    payload: {\n      num: 1,\n    }\n  });\n}\n\n// 模拟数据异步获取\nfunction fn() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('hello saga');\n    }, 2000);\n  });\n}\n\nfunction* fetchData() {\n  // 等待 2 秒后，打印欢迎语（阻塞）\n  const greeting = yield call(fn);\n  console.log('greeting: ', greeting);\n\n  // 立即打印 task 对象（非阻塞）\n  const task = yield fork(fn);\n  console.log('task: ', task);\n}\n\n// function* watcher() {\n//   while (true) {\n//     yield delay(1000);\n//     console.log(1000);\n//     yield fork(fetchData);\n//   }\n// }\n\nexport function* watchIncrementAsync() {\n  yield takeEvery(Types.ADD_COUNT_ASYNC, incrementAsync);\n}\n\n// single entry point to start all Sagas at once\nexport default function* rootSaga() {\n  yield fork(fetchData);\n  yield fork(watchIncrementAsync);\n}\n","/*\n * @Author: lifan\n * @Date: 2018-12-12 09:46:29\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-14 13:47:15\n */\nimport { createStore, compose, applyMiddleware, Store } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistReducer, persistStore, PersistConfig } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from './reducers';\nimport rootSaga from './sagas';\n\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst persistConfig: PersistConfig = {\n  key: 'root',\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst sagaMiddleware  = createSagaMiddleware();\n\nexport default () => {\n  let store: Store = createStore(\n    persistedReducer,\n    composeEnhancers(\n      applyMiddleware(\n        sagaMiddleware,\n      )\n    )\n  );\n\n  const persistor = persistStore(store);\n  sagaMiddleware.run(rootSaga);\n\n  return {\n    store,\n    persistor\n  };\n};\n","/*\n * @Author: lifan\n * @Date: 2018-12-09 21:11:01\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-19 14:16:49\n */\nimport '@babel/polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './containers';\nimport * as serviceWorker from './utils/serviceWorker';\nimport configureStore from './store';\n\nimport 'normalize.css';\nimport './assets/scss/index.scss';\n\nconst configStore = configureStore();\n\nReactDOM.render(\n  <Provider store={configStore.store}>\n    <PersistGate persistor={configStore.persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register({\n  onUpdate: (registration: ServiceWorkerRegistration) => {\n    if (confirm('监测到更新，点击更新')) {\n      try {\n        registration.waiting && registration.waiting.postMessage('skipWaiting');\n      } catch (e) {\n        window.location.reload();\n      }\n    }\n  },\n  onSuccess: () => {\n    console.log('success');\n  }\n});\n\n\nlet v: Tetris = {\n  version: '12'\n};\nconsole.log(v);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"sttyle_wrapper__3NRzk\",\"decorate\":\"sttyle_decorate__3CyxA\",\"center\":\"sttyle_center__2vr2G\",\"screen\":\"sttyle_screen__31rcz\"};"],"sourceRoot":""}