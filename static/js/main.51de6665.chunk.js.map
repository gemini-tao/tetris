{"version":3,"sources":["store/types/index.ts","locales/index.ts","components/Test.tsx","containers/index.tsx","utils/index.ts","store/actions/index.ts","utils/serviceWorker.ts","store/reducers/index.ts","store/reducers/count.ts","store/reducers/locales.ts","store/index.ts","index.tsx"],"names":["Types","LOCALES","en-US","require","zh-CN","Example","_useState","useState","_useState2","Object","slicedToArray","count","setCount","react_default","a","createElement","onClick","App","state","initLocales","switchLocales","locales","window","location","href","concat","origin","pathname","str","intl","init","currentLocale","this","setState","lang","name","reg","RegExp","r","search","substr","match","decodeURIComponent","getUrlParam","hasOwnProperty","props","updateLocales","loadLocales","prevProps","_this$props","addCount","reduceCount","className","get","Test","Component","connect","dispatch","num","type","ADD_COUNT","payload","REDUCE_COUNT","UPDATE_LOCALES","isFirst","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","waiting","onUpdate","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onSuccess","catch","error","addEventListener","reload","combineReducers","arguments","length","undefined","action","devTools","__REDUX_DEVTOOLS_EXTENSION__","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","configStore","store","createStore","compose","persistor","persistStore","configureStore","test","userAgent","ReactDOM","render","es","integration_react","containers","document","getElementById","URL","process","fetch","response","contentType","headers","status","indexOf","ready","unregister","checkValidServiceWorker","confirm","postMessage","e"],"mappings":"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","file":"static/js/main.51de6665.chunk.js","sourcesContent":["/*\n * @Author: lifan\n * @Date: 2018-12-12 13:31:05\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-13 13:53:47\n */\n\n/* eslint-disable no-unused-vars */\nenum Types {\n  ADD_COUNT = 'ADD_COUNT',\n  REDUCE_COUNT = 'REDUCE_COUNT',\n  UPDATE_LOCALES = 'UPDATE_LOCALES',\n}\n\nexport default Types;\n","/*\n * @Author: lifan\n * @Date: 2018-12-14 10:16:11\n * @Last Modified by:   lifan\n * @Last Modified time: 2018-12-14 10:16:11\n */\nexport const LOCALES = {\n  'en-US': require('./en-US.json'),\n  'zh-CN': require('./zh-CN.json'),\n};\n\nexport type TYPE_LOCALES = keyof typeof LOCALES;\n","import React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Example;\n","import React, { Component } from 'react';\nimport { Dispatch } from 'redux';\nimport { State } from '../store/reducers';\nimport { connect } from 'react-redux';\nimport intl from 'react-intl-universal';\nimport { LOCALES, TYPE_LOCALES } from '../locales';\nimport { addCount, reduceCount, updateLocales } from '../store/actions';\nimport { getUrlParam } from '../utils';\nimport Test from '../components/Test';\n\nimport './style.css';\n\ninterface Props {\n  count: number;\n  locales: TYPE_LOCALES;\n  addCount: (num: number) => void;\n  reduceCount: (num: number) => void;\n  updateLocales: (locales: TYPE_LOCALES) => void;\n}\n\nclass App extends Component<Props> {\n  state = {\n    initLocales: false\n  };\n\n  async loadLocales(str: TYPE_LOCALES) {\n    try {\n      await intl.init({\n        currentLocale: str,\n        locales: LOCALES,\n      });\n    } finally {\n      this.setState({\n        initLocales: true\n      });\n    }\n  }\n\n  initLocales(locales: TYPE_LOCALES) {\n    const lang = getUrlParam('lang') as TYPE_LOCALES;\n\n    if (lang && LOCALES.hasOwnProperty(lang)) {\n      this.props.updateLocales(lang);\n      this.loadLocales(lang);\n    } else {\n      this.loadLocales(locales);\n    }\n  }\n\n  switchLocales = (locales: TYPE_LOCALES) => {\n    window.location.href = `${window.location.origin}${window.location.pathname}?lang=${locales}`;\n  }\n\n  componentDidMount() {\n    this.initLocales(this.props.locales);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.locales !== this.props.locales) {\n      this.switchLocales(this.props.locales);\n    }\n  }\n\n  render() {\n    const { initLocales } = this.state;\n    const { count, addCount, reduceCount, locales, updateLocales } = this.props;\n\n    if (!initLocales) {\n      return null;\n    }\n\n    return (\n      <div className=\"app\">\n        <p>{intl.get('count')}:{count}</p>\n        <button onClick={() => addCount(2)}>add</button>\n        <button onClick={() => reduceCount(1)}>reduce</button>\n        <br />\n\n        <p>{locales}</p>\n        <button onClick={() => updateLocales('en-US')}>switch locales(en)</button>\n        <button onClick={() => updateLocales('zh-CN')}>switch locales(zh-CN)</button>\n\n        <Test />\n      </div>\n    );\n  }\n}\n\nconst mapState = (state: State) => ({\n  count: state.count,\n  locales: state.locales,\n});\n\nconst mapDispatch = (dispatch: Dispatch) => ({\n  addCount: (num: number) => dispatch(addCount(num)),\n  reduceCount: (num: number) => dispatch(reduceCount(num)),\n  updateLocales: (locales: TYPE_LOCALES) => dispatch(updateLocales(locales)),\n});\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(App);\n","/*\n * @Author: lifan\n * @Date: 2018-12-13 13:36:59\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-13 16:06:01\n */\n\n/**\n * 判断是否为移动端\n */\nexport const isMobile = (): boolean =>\n  /(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent);\n\n/**\n * 获取url参数\n * @param {string} name\n */\nexport const getUrlParam = (name: string) => {\n  const reg = new RegExp(`(^|&)${name}=([^&]*)(&|$)`);\n  const r = window.location.search.substr(1).match(reg);\n\n  if (r != null) {\n    return decodeURIComponent(r[2]);\n  }\n\n  return;\n};\n","/*\n * @Author: lifan\n * @Date: 2018-12-12 14:50:48\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-14 10:19:03\n */\nimport Types from '../types';\nimport { TYPE_LOCALES } from '../../locales';\n\n/* eslint-disable no-use-before-define */\nexport type AddCount = ReturnType<typeof addCount>;\nexport const addCount = (num: number) => ({\n  type: <Types.ADD_COUNT>Types.ADD_COUNT,\n  payload: {\n    num\n  }\n});\n\nexport type ReduceCount = ReturnType<typeof reduceCount>;\nexport const reduceCount = (num: number) => ({\n  type: <Types.REDUCE_COUNT>Types.REDUCE_COUNT,\n  payload: {\n    num\n  }\n});\n\nexport type UpdateLocales = ReturnType<typeof updateLocales>;\nexport const updateLocales = (locales: TYPE_LOCALES) => ({\n  type: <Types.UPDATE_LOCALES>Types.UPDATE_LOCALES,\n  payload: {\n    locales\n  }\n});\n\nexport type Action =\n  | AddCount\n  | ReduceCount\n  | UpdateLocales;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\n/* eslint-disable */\nlet isFirst = false;\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      if (registration.waiting) {\n        if (config && config.onUpdate) {\n          config.onUpdate(registration);\n        }\n        return;\n      }\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              isFirst = false;\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n              isFirst = true;\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n\n  navigator.serviceWorker.addEventListener('controllerchange', () => {\n    console.log('controllerchange');\n    if (!isFirst) {\n      window.location.reload();\n      isFirst = true;\n    }\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport count from './count';\nimport locales from './locales';\nimport { TYPE_LOCALES } from '../../locales';\n\nexport interface State {\n  count: number;\n  locales: TYPE_LOCALES;\n}\n\nexport default combineReducers<State>({\n  count,\n  locales,\n});\n","/*\n * @Author: lifan\n * @Date: 2018-12-12 14:50:44\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-12 14:51:22\n */\nimport Types from '../types';\nimport { Action } from '../actions';\n\nexport default (state = 0, action: Action) => {\n  switch (action.type) {\n    case Types.ADD_COUNT:\n      return state + action.payload.num;\n    case Types.REDUCE_COUNT:\n      return state - action.payload.num;\n    default: return state;\n  }\n};\n","/*\n * @Author: lifan\n * @Date: 2018-12-13 13:56:58\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-14 10:21:38\n */\n\nimport Types from '../types';\nimport { Action } from '../actions';\nimport { TYPE_LOCALES } from '../../locales';\n\nexport default (state: TYPE_LOCALES = 'zh-CN', action: Action) => {\n  switch (action.type) {\n    case Types.UPDATE_LOCALES:\n      return action.payload.locales;\n    default: return state;\n  }\n};\n","/*\n * @Author: lifan\n * @Date: 2018-12-12 09:46:29\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-12 15:43:46\n */\nimport { createStore, compose } from 'redux';\nimport { persistReducer, persistStore, PersistConfig } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from './reducers';\n\nconst devTools: any = (<any>window).__REDUX_DEVTOOLS_EXTENSION__;\nconst persistConfig: PersistConfig = {\n  key: 'root',\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n  const store = createStore(\n    persistedReducer,\n    compose(\n      devTools && devTools(), // 这里演示用，生产模式不禁用\n    )\n  );\n  const persistor = persistStore(store);\n\n  return {\n    store,\n    persistor\n  };\n};\n","/*\n * @Author: lifan\n * @Date: 2018-12-09 21:11:01\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-13 13:35:41\n */\nimport '@babel/polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './containers';\nimport * as serviceWorker from './utils/serviceWorker';\nimport configureStore from './store';\nimport { isMobile } from './utils';\nimport 'normalize.css';\nimport './assets/scss/index.scss';\n\nconst configStore = configureStore();\nconsole.log(isMobile());\nReactDOM.render(\n  <Provider store={configStore.store}>\n    <PersistGate persistor={configStore.persistor}>\n      <App />\n    </PersistGate>,\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register({\n  onUpdate: (registration: ServiceWorkerRegistration) => {\n    if (confirm('监测到更新，点击更新')) {\n      try {\n        registration.waiting && registration.waiting.postMessage('skipWaiting');\n      } catch (e) {\n        window.location.reload();\n      }\n    }\n  },\n  onSuccess: () => {\n    console.log('success');\n  }\n});\n"],"sourceRoot":""}