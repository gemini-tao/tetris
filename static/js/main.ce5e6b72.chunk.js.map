{"version":3,"sources":["containers/index.tsx","utils/serviceWorker.ts","index.tsx"],"names":["App","react_default","a","createElement","className","Component","isFirst","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","waiting","onUpdate","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onSuccess","catch","error","addEventListener","reload","ReactDOM","render","containers","document","getElementById","URL","process","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","checkValidServiceWorker","confirm","postMessage","e"],"mappings":"8QAaeA,2LARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAHHC,cCUdC,GAAU,EAERC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACAA,EAAaC,QACXN,GAAUA,EAAOO,UACnBP,EAAOO,SAASF,GAIpBA,EAAaG,cAAgB,WAC3B,IAAMC,EAAmBJ,EAAaK,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfX,UAAUC,cAAcW,YAI1BC,QAAQC,IACN,gHAIFxB,GAAU,EAENS,GAAUA,EAAOO,UACnBP,EAAOO,SAASF,KAMlBS,QAAQC,IAAI,sCACZxB,GAAU,EAENS,GAAUA,EAAOgB,WACnBhB,EAAOgB,UAAUX,UAO5BY,MAAM,SAAAC,GACLJ,QAAQI,MAAM,4CAA6CA,KAG/DjB,UAAUC,cAAciB,iBAAiB,mBAAoB,WAC3DL,QAAQC,IAAI,oBACPxB,IACHG,OAAOC,SAASyB,SAChB7B,GAAU,mBC3GhB8B,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBzB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIyB,IACnBC,IACDjC,OAAOC,SAASiC,MAEJC,SAAWnC,OAAOC,SAASkC,OAIvC,OAGFnC,OAAOyB,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAA+B,OAAMH,IAAN,sBAEPnC,GA+EV,SAAiCO,EAAeC,GAE9C+B,MAAMhC,GACHK,KAAK,SAAA4B,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CpC,UAAUC,cAAcoC,MAAMlC,KAAK,SAAAC,GACjCA,EAAakC,aAAanC,KAAK,WAC7BV,OAAOC,SAASyB,aAKpBtB,EAAgBC,EAAOC,KAG1BiB,MAAM,WACLH,QAAQC,IACN,mEApGAyB,CAAwBzC,EAAOC,GAI/BC,UAAUC,cAAcoC,MAAMlC,KAAK,WACjCU,QAAQC,IACN,+GAMJjB,EAAgBC,EAAOC,MCrC/BE,CAAuB,CACrBK,SAAU,SAACF,GACT,GAAIoC,QAAQ,gEACV,IACEpC,EAAaC,QAAQoC,YAAY,eACjC,MAAOC,GACPjD,OAAOC,SAASyB,WAItBJ,UAAW,WACTF,QAAQC,IAAI","file":"static/js/main.ce5e6b72.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\n/* eslint-disable */\nlet isFirst = false;\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      if (registration.waiting) {\n        if (config && config.onUpdate) {\n          config.onUpdate(registration);\n        }\n        return;\n      }\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              isFirst = false;\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n              isFirst = true;\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n\n  navigator.serviceWorker.addEventListener('controllerchange', () => {\n    console.log('controllerchange');\n    if (!isFirst) {\n      window.location.reload();\n      isFirst = true;\n    }\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n * @Author: lifan\n * @Date: 2018-12-09 21:11:01\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-10 09:57:31\n */\nimport '@babel/polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers';\nimport * as serviceWorker from './utils/serviceWorker';\nimport 'normalize.css';\nimport './assets/scss/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\ninterface Registration {\n  waiting: any;\n  [propName: string]: any;\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register({\n  onUpdate: (registration: Registration) => {\n    if (confirm('监测到更新，点击更新')) {\n      try {\n        registration.waiting.postMessage('skipWaiting');\n      } catch (e) {\n        window.location.reload();\n      }\n    }\n  },\n  onSuccess: () => {\n    console.log('success');\n  }\n});\n"],"sourceRoot":""}