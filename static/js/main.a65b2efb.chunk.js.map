{"version":3,"sources":["store/types/index.ts","containers/index.tsx","store/actions/index.ts","utils/serviceWorker.ts","store/reducers/index.ts","store/reducers/count.ts","store/index.ts","index.tsx"],"names":["Types","App","console","log","this","props","_this$props","count","addCount","react_default","a","createElement","className","onClick","Component","connect","state","dispatch","num","type","ADD_COUNT","payload","isFirst","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","waiting","onUpdate","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","catch","error","addEventListener","reload","combineReducers","arguments","length","undefined","action","devTools","__REDUX_DEVTOOLS_EXTENSION__","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","cStore","store","createStore","compose","persistor","persistStore","configureStore","ReactDOM","render","es","integration_react","containers","document","getElementById","URL","process","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","checkValidServiceWorker","confirm","postMessage","e"],"mappings":"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","file":"static/js/main.a65b2efb.chunk.js","sourcesContent":["/*\n * @Author: lifan\n * @Date: 2018-12-12 13:31:05\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-12 14:54:46\n */\n\n/* eslint-disable no-unused-vars */\nenum Types {\n  ADD_COUNT = 'ADD_COUNT',\n}\n\nexport default Types;\n","import React, { Component } from 'react';\nimport { Dispatch } from 'redux';\nimport { State } from '../store/reducers';\nimport { connect } from 'react-redux';\nimport { addCount } from '../store/actions';\nimport './style.css';\n\nconst mapState = (state: State) => ({\n  count: state.count,\n});\n\nconst mapDispatch = (dispatch: Dispatch) => ({\n  addCount: (num: number) => dispatch(addCount(num))\n});\n\ntype connectedProps = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\ntype Props = connectedProps;\n\nclass App extends Component<Props> {\n  render() {\n    console.log(this.props);\n    const { count, addCount } = this.props;\n    return (\n      <div className=\"app\">\n        <p>{count}</p>\n        <button onClick={() => addCount(2)}>add</button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(App);\n","/*\n * @Author: lifan\n * @Date: 2018-12-12 14:50:48\n * @Last Modified by:   lifan\n * @Last Modified time: 2018-12-12 14:50:48\n */\nimport Types from '../types';\n\n/* eslint-disable no-use-before-define */\nexport type AddCount = ReturnType<typeof addCount>;\nexport const addCount = (num: number) => ({\n  type: Types.ADD_COUNT,\n  payload: {\n    num\n  }\n});\n\nexport type Action =\n  | AddCount;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\n/* eslint-disable */\nlet isFirst = false;\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      if (registration.waiting) {\n        if (config && config.onUpdate) {\n          config.onUpdate(registration);\n        }\n        return;\n      }\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              isFirst = false;\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n              isFirst = true;\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n\n  navigator.serviceWorker.addEventListener('controllerchange', () => {\n    console.log('controllerchange');\n    if (!isFirst) {\n      window.location.reload();\n      isFirst = true;\n    }\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport count from './count';\n\nexport interface State {\n  count: number;\n}\n\nexport default combineReducers<State>({\n  count\n});\n","/*\n * @Author: lifan\n * @Date: 2018-12-12 14:50:44\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-12 14:51:22\n */\nimport Types from '../types';\nimport { Action } from '../actions';\n\nexport default (state = 0, action: Action) => {\n  switch (action.type) {\n    case Types.ADD_COUNT:\n      return state + action.payload.num;\n    default: return state;\n  }\n};\n","/*\n * @Author: lifan\n * @Date: 2018-12-12 09:46:29\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-12 15:43:46\n */\nimport { createStore, compose } from 'redux';\nimport { persistReducer, persistStore, PersistConfig } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from './reducers';\n\nconst devTools: any = (<any>window).__REDUX_DEVTOOLS_EXTENSION__;\nconst persistConfig: PersistConfig = {\n  key: 'root',\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n  const store = createStore(\n    persistedReducer,\n    compose(\n      devTools && devTools(),\n    )\n  );\n  const persistor = persistStore(store);\n\n  return {\n    store,\n    persistor\n  };\n};\n","/*\n * @Author: lifan\n * @Date: 2018-12-09 21:11:01\n * @Last Modified by: lifan\n * @Last Modified time: 2018-12-12 15:47:25\n */\nimport '@babel/polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './containers';\nimport * as serviceWorker from './utils/serviceWorker';\nimport configureStore from './store';\nimport 'normalize.css';\nimport './assets/scss/index.scss';\n\nconst cStore = configureStore();\n\nReactDOM.render(\n  <Provider store={cStore.store}>\n    <PersistGate persistor={cStore.persistor}>\n      <App />\n    </PersistGate>,\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register({\n  onUpdate: (registration: ServiceWorkerRegistration) => {\n    if (confirm('监测到更新，点击更新')) {\n      try {\n        registration.waiting && registration.waiting.postMessage('skipWaiting');\n      } catch (e) {\n        window.location.reload();\n      }\n    }\n  },\n  onSuccess: () => {\n    console.log('success');\n  }\n});\n"],"sourceRoot":""}